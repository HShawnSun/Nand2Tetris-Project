CHIP Multi16 {
	IN x[16], y[16];
	OUT Multi16[16], ofMulti;
	PARTS:

    littleMulti(x=false, y=x, sel=y[0], of=ofMulti1, out=multi1, lastX=x, NextX=x1, carry=c1, sr=y, srNext=y1);
    littleMulti(x=multi1, y=x1, sel=y[1], of=ofMulti2, out=multi2, lastX=x1, NextX=x2, carry=c2, sr=y1, srNext=y2);
    littleMulti(x=multi2, y=x2, sel=y[2], of=ofMulti3, out=multi3, lastX=x2, NextX=x3, carry=c3, sr=y2, srNext=y3);
    littleMulti(x=multi3, y=x3, sel=y[3], of=ofMulti4, out=multi4, lastX=x3, NextX=x4, carry=c4, sr=y3, srNext=y4);
    littleMulti(x=multi4, y=x4, sel=y[4], of=ofMulti5, out=multi5, lastX=x4, NextX=x5, carry=c5, sr=y4, srNext=y5);
    littleMulti(x=multi5, y=x5, sel=y[5], of=ofMulti6, out=multi6, lastX=x5, NextX=x6, carry=c6, sr=y5, srNext=y6);
    littleMulti(x=multi6, y=x6, sel=y[6], of=ofMulti7, out=multi7, lastX=x6, NextX=x7, carry=c7, sr=y6, srNext=y7);
    littleMulti(x=multi7, y=x7, sel=y[7], of=ofMulti8, out=multi8, lastX=x7, NextX=x8, carry=c8, sr=y7, srNext=y8);
    littleMulti(x=multi8, y=x8, sel=y[8], of=ofMulti9, out=multi9, lastX=x8, NextX=x9, carry=c9, sr=y8, srNext=y9);
    littleMulti(x=multi9, y=x9, sel=y[9], of=ofMulti10, out=multi10, lastX=x9, NextX=x10, carry=c10, sr=y9, srNext=y10);
    littleMulti(x=multi10, y=x10, sel=y[10], of=ofMulti11, out=multi11, lastX=x10, NextX=x11, carry=c11, sr=y10, srNext=y11);
    littleMulti(x=multi11, y=x11, sel=y[11], of=ofMulti12, out=multi12, lastX=x11, NextX=x12, carry=c12, sr=y11, srNext=y12);
    littleMulti(x=multi12, y=x12, sel=y[12], of=ofMulti13, out=multi13, lastX=x12, NextX=x13, carry=c13, sr=y12, srNext=y13);
    littleMulti(x=multi13, y=x13, sel=y[13], of=ofMulti14, out=multi14, lastX=x13, NextX=x14, carry=c14, sr=y13, srNext=y14);
    littleMulti(x=multi14, y=x14, sel=y[14], of=ofMulti15, out=multi15, lastX=x14, NextX=x15, carry=c15, sr=y14, srNext=y15);
    littleMulti(x=multi15, y=x15, sel=y[15], of=ofMulti16, out=Multi16, lastX=x15, NextX=x16, carry=c16, sr=y15, srNext=y16,  out[15]=Multi16Sign);
    
    // overflow with sign error
    // neg * neg != pos Err1
    // pos * pos != neg Err1
    // pos * neg != pos Err2
    // neg * pos != pos Err2
    // neg * neg != neg Err3
    //pos * pos = pos
    //pos * neg = neg
    //neg * neg = pos
    Xor(a=x[15], b=y[15], out=xyXor);
    Xor(a=xyXor, b=Multi16Sign, out=SignError);
    
    //overflow with multiply errors SOLVED by invalid digits count comparing with 16
    /*as long as the two number's absolute value's multiplication > 2^15, it will overflow  [1]
        except when x and y are of different sign, meaning x*y < 0, then the absolute value's multiplication >= 2^15 (product = -32768 should not be error). [2]
    */
    //Firstly, the zero digits before first 1 (invalid digits) in x and y can sum up to no less than 16 or it will overflow [1]
    ScndComplement(in=x, out=cmpx); //take |x|
    firstDigit(in=cmpx, out=firstDigitX);//decide the number of zeros before the first digit (invalid digits) of x
    ScndComplement(in=y, out=cmpy); //take |y|
    firstDigit(in=cmpy, out=firstDigitY);//decide the number of zeros before the first digit (invalid digits) of y
    //reminder: taking absolute value may cause another common overflow that x or y = -32768, but I covered that problem in the main chip CUSALU, so don't worry

    Plus16(x=firstDigitX, y=firstDigitY, Plus16=sum); //sum = the invalid digits of x + the invalid digits of y
    Sixteen(out=Sixteen); //obtain 16
    Larger(x=Sixteen, y=sum, Larger=MulError); //if MulError=1, than 16 is larger than sumxyZeroDidits, meaning there will be overflow
    Equival(x=sum, y=Sixteen, Equival=LimitStep); //this excluded the case that product exactly = - 32768, so we need to dicide it additionally [2]
    from16to1Boolean(in=LimitStep, out=LimStp);
    And(a=LimStp, b=xyXor, out=xyXorAndLimStp);    //Note that it can only happen when x * y < 0 (x, y are of different sign)
    from16to1Boolean(in=MulError, out=MError);
    And(a=xyXorAndLimStp, b=MError, out=MultiplyError);

    Or(a=SignError, b=MultiplyError, out=ofMulti);  // signError Or multiply error
}