CHIP CUSALU {
	IN x[16], y[16], sel[4];
	OUT out[16], of;
	PARTS:

	//1.
	//And
	And16(a=x, b=y, out=xyAnd);
	//Or
	Or16(a=x, b=y, out=xyOR);
	//Xor = (A OR B) AND (NOT (A AND B))
	Not16(in=xyAnd, out=NxyAnd);
	And16(a=xyOR, b=NxyAnd, out=xyXor);
	
	//2.
	//x<<1
	//use helper CHIP shiftLeft.hdl
	shiftLeft(x=x, shiftLeft=shiftLeft);
	//x>>1
	//use helper CHIP shiftRight.hdl
	shiftRight(x=x,shiftRight=shiftRight);

	//3.
	//x + y
	//use helper CHIP Plus16.hdl
	Plus16(x=x, y=y, Plus16=Plus16, ofAdd=ofAdd);
	//16-bit true (1111 1111 1111 1111) is -1
	//1-bit true (1) is 1
	Mux16(a=Plus16, b=true, sel=ofAdd, out=Plus16out);
	//If ofAdd=0, which means overflow occured, Plus16=-1
	//If ofAdd=1, which means overflow didn't occured, Plus16=Plus16
	
	//x - y
	//use helper CHIP Minus16.hdl
	Minus16(x=x, y=y, Minus16=Minus16, ofMinus=ofMinus);
	//If ofMinus=0, which means overflow occured, out=-1
	//If ofMinus=1, which means overflow didn't occured, out=Minus16
	Mux16(a=Minus16, b=true,sel=ofMinus, out=Minus16out);

	//4.
	//Comparison Operations: x > y; x == y
	//If x - y = positive, then x > y, we output 0000 0000 0000 0001 (1) to represent it
    //If x - y = negative, then x < y, we output 0000 0000 0000 0000 (0) to represent it
    //of = 0
	Larger(x=x, y=y, Larger=Larger);
	//If x - y = 0, then x = y, we output 0000 0000 0000 0001 (1) to represent it
    //If x - y != 0, then x != y, we output 0000 0000 0000 0000 (0) to represent it
    //of = 0
	Equival(x=x, y=y, Equival=Equival);

	//5.
	//Multiplication
	//Most thing in this main chip is to solve problems with -32768
	//if x or y = -32768, we cannot abtain its absolute value, so we divide it to half (shiftRight). After the division, time it with 2 !
	LimitCheck(in=x, out=xIsLimit1);
	LimitCheck(in=y, out=yIsLimit1);
	halfLimit(out=halfLimit1); //half of -32768 is -16384, also 1100 0000 0000 0000, use a help called halfLimit to obtain it
	Mux16(a=x, b=halfLimit1, sel=xIsLimit1, out=x0);
	Mux16(a=y, b=halfLimit1, sel=yIsLimit1, out=y0);
	//Multiplication body
	Multi16(x=x0, y=y0, Multi16=Multi16, ofMulti=ofMulti);
	//if x or y = -32768, their are two possibilities
	Two(out=Two);
	Xor(a=xIsLimit1, b=yIsLimit1, out=xyXorLimit);
	And(a=xIsLimit1, b=yIsLimit1, out=MultixyBothLimit);
	Multi16(x=Multi16, y=Two, Multi16=MultixyXorLimit, ofMulti=ofMultiOneLimit); //if only one of x and y are -32768, then Multiply the result with 2
	//if x and y both = -32768, then out = -1, of=1
	Mux(a=ofMulti, b=false, sel=false, out=ofMulti16);
	//If y=0, out=0, of=0
	IsZero(in=y, out=yIsNotZero);
	Mux(a=ofMulti, b=ofMultiOneLimit,sel=xyXorLimit, out=ofMultiA);
	Mux(a=ofMultiA, b=true, sel=MultixyBothLimit, out=oflMultiB);
	//out
	Mux16(a=Multi16, b=MultixyXorLimit, sel=xyXorLimit, out=Multi16out0);
	Mux16(a=Multi16out0, b=true,sel=oflMultiB, out=Multi16out1);
	Mux16(a=false, b=Multi16out1, sel=yIsNotZero, out=Multi16out);
    
	//6.
	//Division
	//Most thing in this main chip is to solve problems with -32768
	//if x or y = -32768, we cannot abtain its absolute value, so we divide it to half (shiftRight). After the division, time it with 2 !
	LimitCheck(in=x, out=xIsLimit);
	LimitCheck(in=y, out=yIsLimit);
	halfLimit(out=halfLimit); //half of -32768 is -16384, also 1100 0000 0000 0000, use a help called halfLimit to obtain it
	Mux16(a=x, b=halfLimit, sel=xIsLimit, out=x1);
	Mux16(a=y, b=halfLimit, sel=yIsLimit, out=y1);
	//division body (Div16 and Divsion16 inside it)
	Div16(x=x1, y=y1, out=Division16, of=ErrorDiv);
	//if x or y = -32768, their are three possibilities
	Two(out=Two1);
	Multi16(x=Division16, y=Two1, Multi16=DivxLimyNotlim, ofMulti=ofxLimyNotlim); //if x = -32768, y != -32768, then Multiply the result with two
	Div16(x=Division16, y=Two1, out=DivyLimxNotlim, of=ofyLimxNotlim); //if x != -32768, y = -32768, then Divide the result with four
	Inc16(in=false, out=One);
	And(a=xIsLimit, b=yIsLimit, out=BothLimit);
	Mux16(a=DivyLimxNotlim, b=DivxLimyNotlim, sel=xIsLimit, out=DivOneofxyIsLim);
	Xor(a=xIsLimit, b=yIsLimit, out=xOryisLimit);
	Mux16(a=Division16, b=DivOneofxyIsLim, sel=xOryisLimit, out=Div16Pre); 
	Mux16(a=Div16Pre, b=One, sel=BothLimit, out=Div16); //if x and y both = -32768, result=1
	Mux16(a=Div16, b=true,sel=ErrorDiv, out=Division16out);

	//Choose my chips by selection
	//output
	Mux8Way16(a=xyAnd , b=xyOR , c=xyXor, d=shiftLeft , e=shiftRight , f=Plus16out, g=Minus16out, h = Larger, 
 	sel[0] = sel[0] , sel[1] = sel[1] , sel[2] = sel[2], 
 	out = out1) ; 
 	Mux8Way16(a = Equival, b = Multi16out, c = Division16out, d = false , e = false , f = false , g = false , h = false , 
 	sel[0] = sel[0] , sel[1] = sel[1] , sel[2] = sel[2], 
 	out = out2) ; 
 	Mux16(a = out1 , b = out2 , sel = sel[3] , out = out); 
	//of
	Mux8Way(a=false , b=false , c=false, d =false , e=false , f=ofAdd , g = ofMinus  , h = false ,  
 	sel[0] = sel[0] , sel[1] = sel[1] , sel[2] = sel[2], 
 	out = of1) ; 
 	Mux8Way(a = false  , b = oflMultiB , c = ErrorDiv  , d = false, e = false , f = false , g = false , h = false , 
 	sel[0] = sel[0] , sel[1] = sel[1] , sel[2] = sel[2], 
 	out = of2) ; 
 	Mux(a = of1 , b = of2 , sel = sel[3] , out = of); 

}